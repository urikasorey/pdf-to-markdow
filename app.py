import streamlit as st
import fitz  # PyMuPDF
from docx import Document
from docx.oxml.text.paragraph import CT_P
from docx.oxml.table import CT_Tbl
from docx.table import _Cell, Table
from docx.text.paragraph import Paragraph
from PIL import Image
import io
import os
from pathlib import Path
import base64
import re
import cv2
import numpy as np
import pandas as pd
import zipfile
from datetime import datetime
import time
try:
    import pytesseract
    # Streamlit Cloud s·∫Ω c√†i Tesseract t·ª± ƒë·ªông
    TESSERACT_AVAILABLE = True
except ImportError:
    TESSERACT_AVAILABLE = False

def optimize_image(image_path, max_width=1200, quality=85):
    """T·ªëi ∆∞u h√≥a k√≠ch th∆∞·ªõc v√† ch·∫•t l∆∞·ª£ng h√¨nh ·∫£nh"""
    try:
        img = Image.open(image_path)
        
        # Resize n·∫øu ·∫£nh qu√° l·ªõn
        if img.width > max_width:
            ratio = max_width / img.width
            new_height = int(img.height * ratio)
            img = img.resize((max_width, new_height), Image.LANCZOS)
        
        # L∆∞u l·∫°i v·ªõi ch·∫•t l∆∞·ª£ng t·ªëi ∆∞u
        img.save(image_path, optimize=True, quality=quality)
        
        return True
    except Exception as e:
        return False

def detect_table_in_image(image_path, language='vie+eng'):
    """Ph√°t hi·ªán v√† tr√≠ch xu·∫•t b·∫£ng t·ª´ h√¨nh ·∫£nh b·∫±ng OCR"""
    if not TESSERACT_AVAILABLE:
        return None
    
    try:
        # ƒê·ªçc ·∫£nh
        img = cv2.imread(image_path)
        if img is None:
            return None
        
        # Chuy·ªÉn sang grayscale
        gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
        
        # √Åp d·ª•ng threshold ƒë·ªÉ l√†m n·ªïi b·∫≠t ƒë∆∞·ªùng vi·ªÅn
        thresh = cv2.threshold(gray, 0, 255, cv2.THRESH_BINARY_INV + cv2.THRESH_OTSU)[1]
        
        # Ph√°t hi·ªán ƒë∆∞·ªùng ngang v√† d·ªçc (ƒë·∫∑c tr∆∞ng c·ªßa b·∫£ng)
        horizontal_kernel = cv2.getStructuringElement(cv2.MORPH_RECT, (40, 1))
        vertical_kernel = cv2.getStructuringElement(cv2.MORPH_RECT, (1, 40))
        
        horizontal_lines = cv2.morphologyEx(thresh, cv2.MORPH_OPEN, horizontal_kernel, iterations=2)
        vertical_lines = cv2.morphologyEx(thresh, cv2.MORPH_OPEN, vertical_kernel, iterations=2)
        
        # K·∫øt h·ª£p ƒë∆∞·ªùng ngang v√† d·ªçc
        table_mask = cv2.add(horizontal_lines, vertical_lines)
        
        # N·∫øu ph√°t hi·ªán ƒë·ªß nhi·ªÅu ƒë∆∞·ªùng => c√≥ th·ªÉ l√† b·∫£ng
        if cv2.countNonZero(table_mask) > 100:
            # S·ª≠ d·ª•ng OCR ƒë·ªÉ ƒë·ªçc text v·ªõi ng√¥n ng·ªØ ti·∫øng Vi·ªát + English
            ocr_data = pytesseract.image_to_string(img, lang=language)
            
            # Th·ª≠ parse th√†nh b·∫£ng
            lines = [line.strip() for line in ocr_data.split('\n') if line.strip()]
            if len(lines) >= 2:  # √çt nh·∫•t c√≥ header v√† 1 row
                # T·∫°o b·∫£ng Markdown
                return lines
        
        return None
    except Exception as e:
        return None

def lines_to_markdown_table(lines):
    """Chuy·ªÉn ƒë·ªïi danh s√°ch d√≤ng th√†nh b·∫£ng Markdown"""
    if not lines or len(lines) < 2:
        return None
    
    markdown_table = ""
    
    # Header
    header_parts = [p.strip() for p in lines[0].split() if p.strip()]
    if len(header_parts) > 0:
        markdown_table += "| " + " | ".join(header_parts) + " |\n"
        markdown_table += "| " + " | ".join(["---"] * len(header_parts)) + " |\n"
        
        # Rows
        for line in lines[1:]:
            row_parts = [p.strip() for p in line.split() if p.strip()]
            if len(row_parts) > 0:
                # ƒê·∫£m b·∫£o s·ªë c·ªôt b·∫±ng header
                while len(row_parts) < len(header_parts):
                    row_parts.append("")
                markdown_table += "| " + " | ".join(row_parts[:len(header_parts)]) + " |\n"
    
    return markdown_table if markdown_table else None

def extract_images_from_pdf(pdf_path, output_folder, optimize_imgs=True, enable_ocr=True, ocr_lang='vie+eng'):
    """Tr√≠ch xu·∫•t h√¨nh ·∫£nh t·ª´ PDF"""
    doc = fitz.open(pdf_path)
    images = []
    
    for page_num in range(len(doc)):
        page = doc[page_num]
        image_list = page.get_images()
        
        for img_index, img in enumerate(image_list):
            xref = img[0]
            base_image = doc.extract_image(xref)
            image_bytes = base_image["image"]
            image_ext = base_image["ext"]
            
            # L∆∞u h√¨nh ·∫£nh
            image_name = f"image_page{page_num + 1}_{img_index + 1}.{image_ext}"
            image_path = os.path.join(output_folder, image_name)
            
            with open(image_path, "wb") as img_file:
                img_file.write(image_bytes)
            
            # T·ªëi ∆∞u h√≥a ·∫£nh n·∫øu ƒë∆∞·ª£c b·∫≠t
            if optimize_imgs:
                optimize_image(image_path)
            
            # Th·ª≠ ph√°t hi·ªán b·∫£ng trong ·∫£nh n·∫øu OCR ƒë∆∞·ª£c b·∫≠t
            table_data = None
            if enable_ocr:
                table_data = detect_table_in_image(image_path, ocr_lang)
            
            images.append({
                'page': page_num,
                'path': image_path,
                'name': image_name,
                'is_table': table_data is not None,
                'table_data': table_data
            })
    
    doc.close()
    return images

def pdf_to_markdown(pdf_path, output_folder, image_path_prefix='', optimize_imgs=True, enable_ocr=True, ocr_lang='vie+eng'):
    """Chuy·ªÉn ƒë·ªïi PDF sang Markdown"""
    doc = fitz.open(pdf_path)
    markdown_content = ""
    
    # T·∫°o th∆∞ m·ª•c cho h√¨nh ·∫£nh
    os.makedirs(output_folder, exist_ok=True)
    
    # Tr√≠ch xu·∫•t h√¨nh ·∫£nh
    images = extract_images_from_pdf(pdf_path, output_folder, optimize_imgs, enable_ocr, ocr_lang)
    image_index = 0
    
    stats = {
        'pages': len(doc),
        'images': len(images),
        'tables': sum(1 for img in images if img.get('is_table', False))
    }
    
    for page_num in range(len(doc)):
        page = doc[page_num]
        
        # L·∫•y vƒÉn b·∫£n
        text = page.get_text()
        
        # Th√™m vƒÉn b·∫£n v√†o markdown
        if text.strip():
            # Ph√¢n t√≠ch c·∫•u tr√∫c c∆° b·∫£n
            lines = text.split('\n')
            for line in lines:
                line = line.strip()
                if line:
                    # Ph√°t hi·ªán ti√™u ƒë·ªÅ (d√≤ng ng·∫Øn, in hoa ho·∫∑c c√≥ font size l·ªõn)
                    if len(line) < 100 and (line.isupper() or len(line.split()) <= 10):
                        markdown_content += f"\n## {line}\n\n"
                    else:
                        markdown_content += f"{line}\n\n"
        
        # Th√™m h√¨nh ·∫£nh t·ª´ trang n√†y
        page_images = [img for img in images if img['page'] == page_num]
        for img in page_images:
            # N·∫øu ·∫£nh l√† b·∫£ng, hi·ªÉn th·ªã b·∫£ng thay v√¨ ·∫£nh
            if img.get('is_table') and img.get('table_data'):
                table_md = lines_to_markdown_table(img['table_data'])
                if table_md:
                    markdown_content += f"\n**üìä B·∫£ng (OCR):**\n\n{table_md}\n\n"
                else:
                    image_path = f"{image_path_prefix}{img['name']}"
                    markdown_content += f"![Image]({image_path})\n\n"
            else:
                image_path = f"{image_path_prefix}{img['name']}"
                markdown_content += f"![Image]({image_path})\n\n"
        
        # Ph√¢n c√°ch trang
        if page_num < len(doc) - 1:
            markdown_content += "\n---\n\n"
    
    doc.close()
    return markdown_content, stats

def extract_images_from_docx(docx_path, output_folder):
    """Tr√≠ch xu·∫•t h√¨nh ·∫£nh t·ª´ Word"""
    doc = Document(docx_path)
    images = []
    
    os.makedirs(output_folder, exist_ok=True)
    
    # Tr√≠ch xu·∫•t h√¨nh ·∫£nh t·ª´ relationships
    for rel in doc.part.rels.values():
        if "image" in rel.target_ref:
            image_data = rel.target_part.blob
            image_ext = rel.target_ref.split('.')[-1]
            image_name = f"image_{len(images) + 1}.{image_ext}"
            image_path = os.path.join(output_folder, image_name)
            
            with open(image_path, "wb") as img_file:
                img_file.write(image_data)
            
            images.append({
                'path': image_path,
                'name': image_name
            })
    
    return images

def docx_to_markdown(docx_path, output_folder, image_path_prefix=''):
    """Chuy·ªÉn ƒë·ªïi Word sang Markdown"""
    doc = Document(docx_path)
    markdown_content = ""
    
    # T·∫°o th∆∞ m·ª•c cho h√¨nh ·∫£nh
    os.makedirs(output_folder, exist_ok=True)
    
    # Tr√≠ch xu·∫•t h√¨nh ·∫£nh
    images = extract_images_from_docx(docx_path, output_folder)
    image_index = 0
    
    stats = {
        'paragraphs': len(doc.paragraphs),
        'images': len(images),
        'tables': len(doc.tables)
    }
    
    for element in doc.element.body:
        if isinstance(element, CT_P):
            paragraph = Paragraph(element, doc)
            text = paragraph.text.strip()
            
            if text:
                # X√°c ƒë·ªãnh style
                style = paragraph.style.name.lower()
                
                if 'heading 1' in style:
                    markdown_content += f"# {text}\n\n"
                elif 'heading 2' in style:
                    markdown_content += f"## {text}\n\n"
                elif 'heading 3' in style:
                    markdown_content += f"### {text}\n\n"
                elif 'heading 4' in style:
                    markdown_content += f"#### {text}\n\n"
                elif 'heading 5' in style:
                    markdown_content += f"##### {text}\n\n"
                elif 'heading 6' in style:
                    markdown_content += f"###### {text}\n\n"
                else:
                    # X·ª≠ l√Ω ƒë·ªãnh d·∫°ng vƒÉn b·∫£n
                    formatted_text = text
                    for run in paragraph.runs:
                        run_text = run.text
                        if run.bold:
                            formatted_text = formatted_text.replace(run_text, f"**{run_text}**")
                        if run.italic:
                            formatted_text = formatted_text.replace(run_text, f"*{run_text}*")
                    
                    markdown_content += f"{formatted_text}\n\n"
            
            # Ki·ªÉm tra xem paragraph c√≥ ch·ª©a h√¨nh ·∫£nh kh√¥ng
            if paragraph._element.xpath('.//pic:pic'):
                if image_index < len(images):
                    image_path = f"{image_path_prefix}{images[image_index]['name']}"
                    markdown_content += f"![Image]({image_path})\n\n"
                    image_index += 1
        
        elif isinstance(element, CT_Tbl):
            table = Table(element, doc)
            markdown_content += "\n"
            
            # Header
            if table.rows:
                header_cells = table.rows[0].cells
                markdown_content += "| " + " | ".join([cell.text.strip() for cell in header_cells]) + " |\n"
                markdown_content += "| " + " | ".join(["---" for _ in header_cells]) + " |\n"
                
                # C√°c h√†ng c√≤n l·∫°i
                for row in table.rows[1:]:
                    markdown_content += "| " + " | ".join([cell.text.strip() for cell in row.cells]) + " |\n"
            
            markdown_content += "\n"
    
    return markdown_content, stats

def create_zip_file(markdown_content, images_dir, md_filename):
    """T·∫°o file ZIP ch·ª©a markdown v√† t·∫•t c·∫£ h√¨nh ·∫£nh"""
    zip_buffer = io.BytesIO()
    
    with zipfile.ZipFile(zip_buffer, 'w', zipfile.ZIP_DEFLATED) as zip_file:
        # Th√™m file markdown
        zip_file.writestr(md_filename, markdown_content)
        
        # Th√™m t·∫•t c·∫£ h√¨nh ·∫£nh
        if os.path.exists(images_dir):
            for filename in os.listdir(images_dir):
                file_path = os.path.join(images_dir, filename)
                if os.path.isfile(file_path):
                    zip_file.write(file_path, f"images/{filename}")
    
    zip_buffer.seek(0)
    return zip_buffer

def main():
    st.set_page_config(page_title="Chuy·ªÉn ƒë·ªïi PDF/Word sang Markdown", page_icon="üìù", layout="wide")
    
    st.title("üìù Chuy·ªÉn ƒë·ªïi PDF/Word sang Markdown")
    st.write("Upload file PDF ho·∫∑c Word ƒë·ªÉ chuy·ªÉn ƒë·ªïi sang ƒë·ªãnh d·∫°ng Markdown (bao g·ªìm c·∫£ h√¨nh ·∫£nh)")
    
    # Hi·ªÉn th·ªã tr·∫°ng th√°i OCR
    if TESSERACT_AVAILABLE:
        st.success("‚úÖ OCR ƒë√£ ƒë∆∞·ª£c k√≠ch ho·∫°t - C√≥ th·ªÉ nh·∫≠n di·ªán b·∫£ng t·ª´ h√¨nh ·∫£nh (Ti·∫øng Vi·ªát + English)!")
    else:
        st.warning("‚ö†Ô∏è OCR ch∆∞a kh·∫£ d·ª•ng - B·∫£ng s·∫Ω hi·ªÉn th·ªã d∆∞·ªõi d·∫°ng h√¨nh ·∫£nh")
    
    # Sidebar - T√πy ch·ªçn
    with st.sidebar:
        st.header("‚öôÔ∏è T√πy ch·ªçn")
        
        st.subheader("üìä OCR Settings")
        enable_ocr = st.checkbox("B·∫≠t OCR nh·∫≠n di·ªán b·∫£ng", value=True, help="T·ª± ƒë·ªông ph√°t hi·ªán v√† chuy·ªÉn ƒë·ªïi b·∫£ng t·ª´ h√¨nh ·∫£nh")
        ocr_language = st.selectbox(
            "Ng√¥n ng·ªØ OCR",
            ["vie+eng", "eng", "vie"],
            help="vie+eng: Ti·∫øng Vi·ªát + English (khuy√™n d√πng)"
        )
        
        st.subheader("üñºÔ∏è H√¨nh ·∫£nh")
        optimize_images = st.checkbox("T·ªëi ∆∞u k√≠ch th∆∞·ªõc ·∫£nh", value=True, help="Gi·∫£m k√≠ch th∆∞·ªõc ·∫£nh ƒë·ªÉ file nh·∫π h∆°n")
        image_path = st.selectbox(
            "ƒê∆∞·ªùng d·∫´n ·∫£nh trong Markdown",
            ["", "images/", "./", "./images/"],
            help="Ch·ªçn format ƒë∆∞·ªùng d·∫´n ·∫£nh trong file Markdown"
        )
        
        st.subheader("üì¶ Export")
        export_format = st.multiselect(
            "Format xu·∫•t file",
            ["Markdown (.md)", "ZIP (MD + Images)", "HTML"],
            default=["Markdown (.md)", "ZIP (MD + Images)"]
        )
    
    # Upload file (c√≥ th·ªÉ nhi·ªÅu file)
    uploaded_files = st.file_uploader(
        "Ch·ªçn file PDF ho·∫∑c Word", 
        type=['pdf', 'docx'],
        accept_multiple_files=True,
        help="C√≥ th·ªÉ ch·ªçn nhi·ªÅu file c√πng l√∫c"
    )
    
    if uploaded_files:
        # Hi·ªÉn th·ªã th√¥ng tin files
        if len(uploaded_files) == 1:
            st.info(f"üìÑ File: {uploaded_files[0].name} ({uploaded_files[0].size / 1024:.2f} KB)")
        else:
            st.info(f"üìÑ ƒê√£ ch·ªçn {len(uploaded_files)} files - T·ªïng: {sum(f.size for f in uploaded_files) / 1024:.2f} KB")
        
        # N√∫t chuy·ªÉn ƒë·ªïi
        if st.button("üöÄ Chuy·ªÉn ƒë·ªïi sang Markdown", type="primary"):
            start_time = time.time()
            
            all_results = []
            
            for uploaded_file in uploaded_files:
                with st.spinner(f"ƒêang x·ª≠ l√Ω {uploaded_file.name}..."):
                    try:
                        # T·∫°o th∆∞ m·ª•c t·∫°m ƒë·ªÉ x·ª≠ l√Ω
                        temp_dir = f"temp_output_{uploaded_file.name.replace('.', '_')}"
                        images_dir = os.path.join(temp_dir, "images")
                        os.makedirs(images_dir, exist_ok=True)
                        
                        # L∆∞u file t·∫°m
                        temp_file_path = os.path.join(temp_dir, uploaded_file.name)
                        with open(temp_file_path, "wb") as f:
                            f.write(uploaded_file.getbuffer())
                        
                        # X√°c ƒë·ªãnh lo·∫°i file v√† x·ª≠ l√Ω
                        if uploaded_file.name.endswith('.pdf'):
                            markdown_content, stats = pdf_to_markdown(
                                temp_file_path, images_dir, image_path, 
                                optimize_images, enable_ocr, ocr_language
                            )
                        elif uploaded_file.name.endswith('.docx'):
                            markdown_content, stats = docx_to_markdown(temp_file_path, images_dir, image_path)
                        else:
                            st.error(f"‚ùå {uploaded_file.name}: ƒê·ªãnh d·∫°ng kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£!")
                            continue
                        
                        all_results.append({
                            'filename': uploaded_file.name,
                            'markdown': markdown_content,
                            'stats': stats,
                            'images_dir': images_dir,
                            'temp_dir': temp_dir
                        })
                        
                    except Exception as e:
                        st.error(f"‚ùå L·ªói khi x·ª≠ l√Ω {uploaded_file.name}: {str(e)}")
                        continue
            
            if all_results:
                elapsed_time = time.time() - start_time
                st.success(f"‚úÖ Chuy·ªÉn ƒë·ªïi th√†nh c√¥ng {len(all_results)} file(s) trong {elapsed_time:.2f}s!")
                
                # N·∫øu ch·ªâ 1 file, hi·ªÉn th·ªã chi ti·∫øt
                if len(all_results) == 1:
                    result = all_results[0]
                    
                    # Hi·ªÉn th·ªã th·ªëng k√™
                    st.subheader("üìä Th·ªëng k√™")
                    stat_cols = st.columns(len(result['stats']))
                    for idx, (key, value) in enumerate(result['stats'].items()):
                        with stat_cols[idx]:
                            st.metric(key.capitalize(), value)
                    
                    # T·∫°o 2 c·ªôt
                    col1, col2 = st.columns(2)
                    
                    with col1:
                        st.subheader("üìù N·ªôi dung Markdown")
                        st.text_area("Markdown Output", result['markdown'], height=400)
                        
                        # N√∫t download markdown
                        if "Markdown (.md)" in export_format:
                            st.download_button(
                                label="üíæ T·∫£i xu·ªëng Markdown",
                                data=result['markdown'],
                                file_name=f"{Path(result['filename']).stem}.md",
                                mime="text/markdown"
                            )
                    
                        
                        # N√∫t download ZIP
                        if "ZIP (MD + Images)" in export_format:
                            zip_file = create_zip_file(
                                result['markdown'], 
                                result['images_dir'], 
                                f"{Path(result['filename']).stem}.md"
                            )
                            st.download_button(
                                label="üì¶ T·∫£i xu·ªëng ZIP (MD + Images)",
                                data=zip_file,
                                file_name=f"{Path(result['filename']).stem}.zip",
                                mime="application/zip"
                            )
                        
                        # HTML Export
                        if "HTML" in export_format:
                            html_content = f"""
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>{Path(result['filename']).stem}</title>
    <style>
        body {{ font-family: Arial, sans-serif; max-width: 800px; margin: 50px auto; padding: 20px; }}
        img {{ max-width: 100%; height: auto; }}
        table {{ border-collapse: collapse; width: 100%; margin: 20px 0; }}
        th, td {{ border: 1px solid #ddd; padding: 8px; text-align: left; }}
        th {{ background-color: #f2f2f2; }}
    </style>
</head>
<body>
{result['markdown']}
</body>
</html>
"""
                            st.download_button(
                                label="üìÑ T·∫£i xu·ªëng HTML",
                                data=html_content,
                                file_name=f"{Path(result['filename']).stem}.html",
                                mime="text/html"
                            )
                    
                    with col2:
                        st.subheader("üëÅÔ∏è Preview Markdown")
                        # Thay th·∫ø ƒë∆∞·ªùng d·∫´n ·∫£nh ƒë·ªÉ hi·ªÉn th·ªã trong Streamlit
                        preview_content = result['markdown']
                        if os.path.exists(result['images_dir']):
                            image_files = [f for f in os.listdir(result['images_dir']) if f.endswith(('.png', '.jpg', '.jpeg', '.gif', '.bmp'))]
                            for img_file in image_files:
                                img_path = os.path.join(result['images_dir'], img_file)
                                # ƒê·ªçc ·∫£nh v√† convert sang base64 ƒë·ªÉ hi·ªÉn th·ªã inline
                                with open(img_path, "rb") as img_f:
                                    img_data = base64.b64encode(img_f.read()).decode()
                                    img_ext = img_file.split('.')[-1]
                                    # Thay th·∫ø ƒë∆∞·ªùng d·∫´n ·∫£nh b·∫±ng data URI
                                    preview_content = preview_content.replace(
                                        f"![Image]({image_path}{img_file})",
                                        f'<img src="data:image/{img_ext};base64,{img_data}" alt="{img_file}" style="max-width:100%; height:auto;"/>'
                                    )
                                    preview_content = preview_content.replace(
                                        f"![Image]({img_file})",
                                        f'<img src="data:image/{img_ext};base64,{img_data}" alt="{img_file}" style="max-width:100%; height:auto;"/>'
                                    )
                        st.markdown(preview_content, unsafe_allow_html=True)
                    
                    # Hi·ªÉn th·ªã h√¨nh ·∫£nh ƒë√£ tr√≠ch xu·∫•t
                    if os.path.exists(result['images_dir']):
                        image_files = [f for f in os.listdir(result['images_dir']) if f.endswith(('.png', '.jpg', '.jpeg', '.gif', '.bmp'))]
                        if image_files:
                            st.subheader(f"üñºÔ∏è H√¨nh ·∫£nh ƒë√£ tr√≠ch xu·∫•t ({len(image_files)} ·∫£nh)")
                            
                            cols = st.columns(3)
                            for idx, img_file in enumerate(image_files):
                                with cols[idx % 3]:
                                    img_path = os.path.join(result['images_dir'], img_file)
                                    st.image(img_path, caption=img_file, use_container_width=True)
                                    
                                    # N√∫t download t·ª´ng ·∫£nh
                                    with open(img_path, "rb") as f:
                                        st.download_button(
                                            label=f"‚¨áÔ∏è T·∫£i {img_file}",
                                            data=f,
                                            file_name=img_file,
                                            mime="image/png",
                                            key=f"download_{img_file}"
                                        )
                
                # N·∫øu nhi·ªÅu file, hi·ªÉn th·ªã t·ªïng h·ª£p
                else:
                    st.subheader("üìä T·ªïng h·ª£p k·∫øt qu·∫£")
                    
                    for idx, result in enumerate(all_results):
                        with st.expander(f"üìÑ {result['filename']}", expanded=False):
                            # Th·ªëng k√™
                            stat_cols = st.columns(len(result['stats']))
                            for idx_stat, (key, value) in enumerate(result['stats'].items()):
                                with stat_cols[idx_stat]:
                                    st.metric(key.capitalize(), value)
                            
                            # Download buttons
                            cols = st.columns(3)
                            with cols[0]:
                                if "Markdown (.md)" in export_format:
                                    st.download_button(
                                        label="üíæ MD",
                                        data=result['markdown'],
                                        file_name=f"{Path(result['filename']).stem}.md",
                                        mime="text/markdown",
                                        key=f"md_{idx}"
                                    )
                            with cols[1]:
                                if "ZIP (MD + Images)" in export_format:
                                    zip_file = create_zip_file(
                                        result['markdown'], 
                                        result['images_dir'], 
                                        f"{Path(result['filename']).stem}.md"
                                    )
                                    st.download_button(
                                        label="üì¶ ZIP",
                                        data=zip_file,
                                        file_name=f"{Path(result['filename']).stem}.zip",
                                        mime="application/zip",
                                        key=f"zip_{idx}"
                                    )
                            with cols[2]:
                                if "HTML" in export_format:
                                    html_content = f"<!DOCTYPE html><html><body>{result['markdown']}</body></html>"
                                    st.download_button(
                                        label="üìÑ HTML",
                                        data=html_content,
                                        file_name=f"{Path(result['filename']).stem}.html",
                                        mime="text/html",
                                        key=f"html_{idx}"
                                    )
                    
                    # Download t·∫•t c·∫£ th√†nh 1 ZIP l·ªõn
                    st.subheader("üì¶ T·∫£i xu·ªëng t·∫•t c·∫£")
                    all_zip_buffer = io.BytesIO()
                    with zipfile.ZipFile(all_zip_buffer, 'w', zipfile.ZIP_DEFLATED) as zip_file:
                        for result in all_results:
                            # Th√™m markdown
                            zip_file.writestr(
                                f"{Path(result['filename']).stem}/{Path(result['filename']).stem}.md",
                                result['markdown']
                            )
                            # Th√™m images
                            if os.path.exists(result['images_dir']):
                                for img_file in os.listdir(result['images_dir']):
                                    img_path = os.path.join(result['images_dir'], img_file)
                                    zip_file.write(
                                        img_path,
                                        f"{Path(result['filename']).stem}/images/{img_file}"
                                    )
                    all_zip_buffer.seek(0)
                    st.download_button(
                        label="üì¶ T·∫£i xu·ªëng t·∫•t c·∫£ (ZIP)",
                        data=all_zip_buffer,
                        file_name=f"converted_files_{datetime.now().strftime('%Y%m%d_%H%M%S')}.zip",
                        mime="application/zip"
                    )
        
        # H∆∞·ªõng d·∫´n
        with st.expander("‚ÑπÔ∏è H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng"):
            st.markdown("""
            ### C√°ch s·ª≠ d·ª•ng:
            1. **Upload file**: Ch·ªçn file PDF ho·∫∑c Word (.docx) c·∫ßn chuy·ªÉn ƒë·ªïi
            2. **Nh·∫•n n√∫t Chuy·ªÉn ƒë·ªïi**: ·ª®ng d·ª•ng s·∫Ω x·ª≠ l√Ω file v√† t·∫°o Markdown
            3. **Xem k·∫øt qu·∫£**: 
               - N·ªôi dung Markdown ·ªü c·ªôt b√™n tr√°i
               - Preview Markdown ·ªü c·ªôt b√™n ph·∫£i
               - H√¨nh ·∫£nh ƒë∆∞·ª£c hi·ªÉn th·ªã b√™n d∆∞·ªõi
            4. **T·∫£i xu·ªëng**: T·∫£i file Markdown v√† h√¨nh ·∫£nh v·ªÅ m√°y
            
            ### T√≠nh nƒÉng M·ªöI:
            - ‚úÖ **Upload nhi·ªÅu file c√πng l√∫c** - Batch processing
            - ‚úÖ **OCR ti·∫øng Vi·ªát + English** - Nh·∫≠n di·ªán b·∫£ng ch√≠nh x√°c
            - ‚úÖ **T·ªëi ∆∞u h√¨nh ·∫£nh** - Gi·∫£m k√≠ch th∆∞·ªõc file
            - ‚úÖ **T·∫£i xu·ªëng ZIP** - G·ªôp markdown + images
            - ‚úÖ **Export HTML** - Xu·∫•t sang ƒë·ªãnh d·∫°ng HTML
            - ‚úÖ **Th·ªëng k√™ file** - S·ªë trang, ·∫£nh, b·∫£ng
            - ‚úÖ **T√πy ch·ªçn ƒë∆∞·ªùng d·∫´n ·∫£nh** - Linh ho·∫°t theo nhu c·∫ßu
            - ‚úÖ **PWA Ready** - C√†i ƒë·∫∑t nh∆∞ app native
            
            ### T√≠nh nƒÉng c∆° b·∫£n:
            - ‚úÖ Chuy·ªÉn ƒë·ªïi PDF sang Markdown
            - ‚úÖ Chuy·ªÉn ƒë·ªïi Word (.docx) sang Markdown
            - ‚úÖ Tr√≠ch xu·∫•t v√† l∆∞u h√¨nh ·∫£nh
            - ‚úÖ Gi·ªØ nguy√™n ƒë·ªãnh d·∫°ng c∆° b·∫£n (ti√™u ƒë·ªÅ, in ƒë·∫≠m, in nghi√™ng)
            - ‚úÖ H·ªó tr·ª£ b·∫£ng (t·ª´ Word)
            - ‚úÖ Preview tr·ª±c ti·∫øp
            
            ### L∆∞u √Ω:
            - H√¨nh ·∫£nh s·∫Ω ƒë∆∞·ª£c l∆∞u trong th∆∞ m·ª•c `images/`
            - ƒê∆∞·ªùng d·∫´n h√¨nh ·∫£nh trong Markdown l√† ƒë∆∞·ªùng d·∫´n t∆∞∆°ng ƒë·ªëi
            - ƒê·ªãnh d·∫°ng ph·ª©c t·∫°p c√≥ th·ªÉ c·∫ßn ch·ªânh s·ª≠a th·ªß c√¥ng
            """)

if __name__ == "__main__":
    main()
