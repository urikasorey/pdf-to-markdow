import streamlit as st
import fitz  # PyMuPDF
from docx import Document
from docx.oxml.text.paragraph import CT_P
from docx.oxml.table import CT_Tbl
from docx.table import _Cell, Table
from docx.text.paragraph import Paragraph
from PIL import Image
import io
import os
from pathlib import Path
import base64
import re

def extract_images_from_pdf(pdf_path, output_folder):
    """Tr√≠ch xu·∫•t h√¨nh ·∫£nh t·ª´ PDF"""
    doc = fitz.open(pdf_path)
    images = []
    
    for page_num in range(len(doc)):
        page = doc[page_num]
        image_list = page.get_images()
        
        for img_index, img in enumerate(image_list):
            xref = img[0]
            base_image = doc.extract_image(xref)
            image_bytes = base_image["image"]
            image_ext = base_image["ext"]
            
            # L∆∞u h√¨nh ·∫£nh
            image_name = f"image_page{page_num + 1}_{img_index + 1}.{image_ext}"
            image_path = os.path.join(output_folder, image_name)
            
            with open(image_path, "wb") as img_file:
                img_file.write(image_bytes)
            
            images.append({
                'page': page_num,
                'path': image_path,
                'name': image_name
            })
    
    doc.close()
    return images

def pdf_to_markdown(pdf_path, output_folder):
    """Chuy·ªÉn ƒë·ªïi PDF sang Markdown"""
    doc = fitz.open(pdf_path)
    markdown_content = ""
    
    # T·∫°o th∆∞ m·ª•c cho h√¨nh ·∫£nh
    os.makedirs(output_folder, exist_ok=True)
    
    # Tr√≠ch xu·∫•t h√¨nh ·∫£nh
    images = extract_images_from_pdf(pdf_path, output_folder)
    image_index = 0
    
    for page_num in range(len(doc)):
        page = doc[page_num]
        
        # L·∫•y vƒÉn b·∫£n
        text = page.get_text()
        
        # Th√™m vƒÉn b·∫£n v√†o markdown
        if text.strip():
            # Ph√¢n t√≠ch c·∫•u tr√∫c c∆° b·∫£n
            lines = text.split('\n')
            for line in lines:
                line = line.strip()
                if line:
                    # Ph√°t hi·ªán ti√™u ƒë·ªÅ (d√≤ng ng·∫Øn, in hoa ho·∫∑c c√≥ font size l·ªõn)
                    if len(line) < 100 and (line.isupper() or len(line.split()) <= 10):
                        markdown_content += f"\n## {line}\n\n"
                    else:
                        markdown_content += f"{line}\n\n"
        
        # Th√™m h√¨nh ·∫£nh t·ª´ trang n√†y
        page_images = [img for img in images if img['page'] == page_num]
        for img in page_images:
            markdown_content += f"![Image]({img['name']})\n\n"
        
        # Ph√¢n c√°ch trang
        if page_num < len(doc) - 1:
            markdown_content += "\n---\n\n"
    
    doc.close()
    return markdown_content

def extract_images_from_docx(docx_path, output_folder):
    """Tr√≠ch xu·∫•t h√¨nh ·∫£nh t·ª´ Word"""
    doc = Document(docx_path)
    images = []
    
    os.makedirs(output_folder, exist_ok=True)
    
    # Tr√≠ch xu·∫•t h√¨nh ·∫£nh t·ª´ relationships
    for rel in doc.part.rels.values():
        if "image" in rel.target_ref:
            image_data = rel.target_part.blob
            image_ext = rel.target_ref.split('.')[-1]
            image_name = f"image_{len(images) + 1}.{image_ext}"
            image_path = os.path.join(output_folder, image_name)
            
            with open(image_path, "wb") as img_file:
                img_file.write(image_data)
            
            images.append({
                'path': image_path,
                'name': image_name
            })
    
    return images

def docx_to_markdown(docx_path, output_folder):
    """Chuy·ªÉn ƒë·ªïi Word sang Markdown"""
    doc = Document(docx_path)
    markdown_content = ""
    
    # T·∫°o th∆∞ m·ª•c cho h√¨nh ·∫£nh
    os.makedirs(output_folder, exist_ok=True)
    
    # Tr√≠ch xu·∫•t h√¨nh ·∫£nh
    images = extract_images_from_docx(docx_path, output_folder)
    image_index = 0
    
    for element in doc.element.body:
        if isinstance(element, CT_P):
            paragraph = Paragraph(element, doc)
            text = paragraph.text.strip()
            
            if text:
                # X√°c ƒë·ªãnh style
                style = paragraph.style.name.lower()
                
                if 'heading 1' in style:
                    markdown_content += f"# {text}\n\n"
                elif 'heading 2' in style:
                    markdown_content += f"## {text}\n\n"
                elif 'heading 3' in style:
                    markdown_content += f"### {text}\n\n"
                elif 'heading 4' in style:
                    markdown_content += f"#### {text}\n\n"
                elif 'heading 5' in style:
                    markdown_content += f"##### {text}\n\n"
                elif 'heading 6' in style:
                    markdown_content += f"###### {text}\n\n"
                else:
                    # X·ª≠ l√Ω ƒë·ªãnh d·∫°ng vƒÉn b·∫£n
                    formatted_text = text
                    for run in paragraph.runs:
                        run_text = run.text
                        if run.bold:
                            formatted_text = formatted_text.replace(run_text, f"**{run_text}**")
                        if run.italic:
                            formatted_text = formatted_text.replace(run_text, f"*{run_text}*")
                    
                    markdown_content += f"{formatted_text}\n\n"
            
            # Ki·ªÉm tra xem paragraph c√≥ ch·ª©a h√¨nh ·∫£nh kh√¥ng
            if paragraph._element.xpath('.//pic:pic'):
                if image_index < len(images):
                    markdown_content += f"![Image]({images[image_index]['name']})\n\n"
                    image_index += 1
        
        elif isinstance(element, CT_Tbl):
            table = Table(element, doc)
            markdown_content += "\n"
            
            # Header
            if table.rows:
                header_cells = table.rows[0].cells
                markdown_content += "| " + " | ".join([cell.text.strip() for cell in header_cells]) + " |\n"
                markdown_content += "| " + " | ".join(["---" for _ in header_cells]) + " |\n"
                
                # C√°c h√†ng c√≤n l·∫°i
                for row in table.rows[1:]:
                    markdown_content += "| " + " | ".join([cell.text.strip() for cell in row.cells]) + " |\n"
            
            markdown_content += "\n"
    
    return markdown_content

def main():
    st.set_page_config(page_title="Chuy·ªÉn ƒë·ªïi PDF/Word sang Markdown", page_icon="üìù", layout="wide")
    
    st.title("üìù Chuy·ªÉn ƒë·ªïi PDF/Word sang Markdown")
    st.write("Upload file PDF ho·∫∑c Word ƒë·ªÉ chuy·ªÉn ƒë·ªïi sang ƒë·ªãnh d·∫°ng Markdown (bao g·ªìm c·∫£ h√¨nh ·∫£nh)")
    
    # Upload file
    uploaded_file = st.file_uploader("Ch·ªçn file PDF ho·∫∑c Word", type=['pdf', 'docx'])
    
    if uploaded_file is not None:
        # Hi·ªÉn th·ªã th√¥ng tin file
        st.info(f"üìÑ File: {uploaded_file.name} ({uploaded_file.size / 1024:.2f} KB)")
        
        # T·∫°o th∆∞ m·ª•c t·∫°m ƒë·ªÉ x·ª≠ l√Ω
        temp_dir = "temp_output"
        images_dir = os.path.join(temp_dir, "images")
        os.makedirs(images_dir, exist_ok=True)
        
        # L∆∞u file t·∫°m
        temp_file_path = os.path.join(temp_dir, uploaded_file.name)
        with open(temp_file_path, "wb") as f:
            f.write(uploaded_file.getbuffer())
        
        # N√∫t chuy·ªÉn ƒë·ªïi
        if st.button("üöÄ Chuy·ªÉn ƒë·ªïi sang Markdown", type="primary"):
            with st.spinner("ƒêang x·ª≠ l√Ω..."):
                try:
                    # X√°c ƒë·ªãnh lo·∫°i file v√† x·ª≠ l√Ω
                    if uploaded_file.name.endswith('.pdf'):
                        markdown_content = pdf_to_markdown(temp_file_path, images_dir)
                    elif uploaded_file.name.endswith('.docx'):
                        markdown_content = docx_to_markdown(temp_file_path, images_dir)
                    else:
                        st.error("ƒê·ªãnh d·∫°ng file kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£!")
                        return
                    
                    # Hi·ªÉn th·ªã k·∫øt qu·∫£
                    st.success("‚úÖ Chuy·ªÉn ƒë·ªïi th√†nh c√¥ng!")
                    
                    # T·∫°o 2 c·ªôt
                    col1, col2 = st.columns(2)
                    
                    with col1:
                        st.subheader("üìù N·ªôi dung Markdown")
                        st.text_area("Markdown Output", markdown_content, height=400)
                        
                        # N√∫t download markdown
                        st.download_button(
                            label="üíæ T·∫£i xu·ªëng Markdown",
                            data=markdown_content,
                            file_name=f"{Path(uploaded_file.name).stem}.md",
                            mime="text/markdown"
                        )
                    
                    with col2:
                        st.subheader("üëÅÔ∏è Preview Markdown")
                        # Thay th·∫ø ƒë∆∞·ªùng d·∫´n ·∫£nh ƒë·ªÉ hi·ªÉn th·ªã trong Streamlit
                        preview_content = markdown_content
                        if os.path.exists(images_dir):
                            image_files = [f for f in os.listdir(images_dir) if f.endswith(('.png', '.jpg', '.jpeg', '.gif', '.bmp'))]
                            for img_file in image_files:
                                img_path = os.path.join(images_dir, img_file)
                                # ƒê·ªçc ·∫£nh v√† convert sang base64 ƒë·ªÉ hi·ªÉn th·ªã inline
                                with open(img_path, "rb") as img_f:
                                    img_data = base64.b64encode(img_f.read()).decode()
                                    img_ext = img_file.split('.')[-1]
                                    # Thay th·∫ø ƒë∆∞·ªùng d·∫´n ·∫£nh b·∫±ng data URI
                                    preview_content = preview_content.replace(
                                        f"![Image]({img_file})",
                                        f'<img src="data:image/{img_ext};base64,{img_data}" alt="{img_file}" style="max-width:100%; height:auto;"/>'
                                    )
                        st.markdown(preview_content, unsafe_allow_html=True)
                    
                    # Hi·ªÉn th·ªã h√¨nh ·∫£nh ƒë√£ tr√≠ch xu·∫•t
                    if os.path.exists(images_dir):
                        image_files = [f for f in os.listdir(images_dir) if f.endswith(('.png', '.jpg', '.jpeg', '.gif', '.bmp'))]
                        if image_files:
                            st.subheader(f"üñºÔ∏è H√¨nh ·∫£nh ƒë√£ tr√≠ch xu·∫•t ({len(image_files)} ·∫£nh)")
                            
                            cols = st.columns(3)
                            for idx, img_file in enumerate(image_files):
                                with cols[idx % 3]:
                                    img_path = os.path.join(images_dir, img_file)
                                    st.image(img_path, caption=img_file, use_container_width=True)
                                    
                                    # N√∫t download t·ª´ng ·∫£nh
                                    with open(img_path, "rb") as f:
                                        st.download_button(
                                            label=f"‚¨áÔ∏è T·∫£i {img_file}",
                                            data=f,
                                            file_name=img_file,
                                            mime="image/png",
                                            key=f"download_{img_file}"
                                        )
                
                except Exception as e:
                    st.error(f"‚ùå L·ªói: {str(e)}")
                    st.exception(e)
        
        # H∆∞·ªõng d·∫´n
        with st.expander("‚ÑπÔ∏è H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng"):
            st.markdown("""
            ### C√°ch s·ª≠ d·ª•ng:
            1. **Upload file**: Ch·ªçn file PDF ho·∫∑c Word (.docx) c·∫ßn chuy·ªÉn ƒë·ªïi
            2. **Nh·∫•n n√∫t Chuy·ªÉn ƒë·ªïi**: ·ª®ng d·ª•ng s·∫Ω x·ª≠ l√Ω file v√† t·∫°o Markdown
            3. **Xem k·∫øt qu·∫£**: 
               - N·ªôi dung Markdown ·ªü c·ªôt b√™n tr√°i
               - Preview Markdown ·ªü c·ªôt b√™n ph·∫£i
               - H√¨nh ·∫£nh ƒë∆∞·ª£c hi·ªÉn th·ªã b√™n d∆∞·ªõi
            4. **T·∫£i xu·ªëng**: T·∫£i file Markdown v√† h√¨nh ·∫£nh v·ªÅ m√°y
            
            ### T√≠nh nƒÉng:
            - ‚úÖ Chuy·ªÉn ƒë·ªïi PDF sang Markdown
            - ‚úÖ Chuy·ªÉn ƒë·ªïi Word (.docx) sang Markdown
            - ‚úÖ Tr√≠ch xu·∫•t v√† l∆∞u h√¨nh ·∫£nh
            - ‚úÖ Gi·ªØ nguy√™n ƒë·ªãnh d·∫°ng c∆° b·∫£n (ti√™u ƒë·ªÅ, in ƒë·∫≠m, in nghi√™ng)
            - ‚úÖ H·ªó tr·ª£ b·∫£ng (t·ª´ Word)
            - ‚úÖ Preview tr·ª±c ti·∫øp
            
            ### L∆∞u √Ω:
            - H√¨nh ·∫£nh s·∫Ω ƒë∆∞·ª£c l∆∞u trong th∆∞ m·ª•c `images/`
            - ƒê∆∞·ªùng d·∫´n h√¨nh ·∫£nh trong Markdown l√† ƒë∆∞·ªùng d·∫´n t∆∞∆°ng ƒë·ªëi
            - ƒê·ªãnh d·∫°ng ph·ª©c t·∫°p c√≥ th·ªÉ c·∫ßn ch·ªânh s·ª≠a th·ªß c√¥ng
            """)

if __name__ == "__main__":
    main()
